import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchCount } from "./quizAPI";

export interface AnswerItem {
  id: number;
  text: string;
  isSelected: boolean;
  audioUrl: string;
}

export interface QuizItem {
  name: string;
  questionAudioUrl: string;
  questionVideoUrl: string;
  isFinished: boolean;
  correctAnswerId: number;
  answers: AnswerItem[];
}
export interface QuizState {
  userName: string;
  quiz: QuizItem[];
  count: number;
}

const initialState: QuizState = {
  userName: "",
  quiz: [
    {
      name: "R&B",
      questionAudioUrl: "",
      questionVideoUrl: "",
      isFinished: true,
      correctAnswerId: 1,
      answers: [
        { id: 1, text: "Track name1", isSelected: false, audioUrl: "" },
        { id: 2, text: "Track name2", isSelected: false, audioUrl: "" },
        { id: 3, text: "Track name3", isSelected: false, audioUrl: "" },
        { id: 2, text: "Track name4", isSelected: false, audioUrl: "" },
      ],
    },
    {
      name: "Techno",
      questionAudioUrl: "",
      questionVideoUrl: "",
      isFinished: false,
      correctAnswerId: 2,
      answers: [
        { id: 1, text: "Track name1", isSelected: false, audioUrl: "" },
        { id: 2, text: "Track name2", isSelected: false, audioUrl: "" },
        { id: 3, text: "Track name3", isSelected: false, audioUrl: "" },
        { id: 2, text: "Track name4", isSelected: false, audioUrl: "" },
      ],
    },
    {
      name: "Soul",
      questionAudioUrl: "",
      questionVideoUrl: "",
      isFinished: false,
      correctAnswerId: 3,
      answers: [
        { id: 1, text: "Track name1", isSelected: false, audioUrl: "" },
        { id: 2, text: "Track name2", isSelected: false, audioUrl: "" },
        { id: 3, text: "Track name3", isSelected: false, audioUrl: "" },
        { id: 2, text: "Track name4", isSelected: false, audioUrl: "" },
      ],
    },
    {
      name: "Jazz",
      questionAudioUrl: "",
      questionVideoUrl: "",
      isFinished: false,
      correctAnswerId: 4,
      answers: [
        { id: 1, text: "Track name1", isSelected: false, audioUrl: "" },
        { id: 2, text: "Track name2", isSelected: false, audioUrl: "" },
        { id: 3, text: "Track name3", isSelected: false, audioUrl: "" },
        { id: 2, text: "Track name4", isSelected: false, audioUrl: "" },
      ],
    },
  ],
  count: 0,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "quiz/fetchCount",
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const quizSlice = createSlice({
  name: "quiz",
  initialState,
  reducers: {
    increment: (state) => {
      //state.value += 1;
    },
    decrement: (state) => {
      //state.value -= 1;
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      //state.value += action.payload;
    },
  },
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        //state.quiz = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        //state.status = "idle";
        //state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        //state.status = "failed";
      });
  },
});

export const { increment, decrement, incrementByAmount } = quizSlice.actions;

//export const selectCount = (state: RootState) => state.counter.value;

// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default quizSlice.reducer;
