import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchCount } from "./quizAPI";

export interface AnswerItem {
  id: string;
  audio: string;
  songTitle: string;
  description: string;
  image: string;
  name: string;

  isSelected: boolean;
}

export interface QuizItem {
  data: AnswerItem[];
  genre: string;
  id: string;

  questionAudioUrl: string;
  isFinished: boolean;
  isCorrectAnswerSelected: boolean;
  correctAnswerId: string;
}
export interface QuizState {
  userName: string;
  quiz: QuizItem[];
  count: number;
}

const initialState: QuizState = {
  userName: "",
  quiz: [
    {
      genre: "R&B",
      id: "1",
      questionAudioUrl: "",
      isFinished: false,
      isCorrectAnswerSelected: false,
      correctAnswerId: "1",
      data: [
        {
          id: "1-1",
          songTitle: "Track name1",
          isSelected: false,
          audio: "",
          description: "",
          image: "",
          name: "",
        },
        {
          id: "1-2",
          songTitle: "Track name2",
          isSelected: false,
          audio: "",
          description: "",
          image: "",
          name: "",
        },
        {
          id: "1-3",
          songTitle: "Track name3",
          isSelected: false,
          audio: "",
          description: "",
          image: "",
          name: "",
        },
        {
          id: "1-4",
          songTitle: "Track name4",
          isSelected: false,
          audio: "",
          description: "",
          image: "",
          name: "",
        },
      ],
    },
  ],
  count: 0,
};

export const incrementAsync = createAsyncThunk(
  "quiz/fetchCount",
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const quizSlice = createSlice({
  name: "quiz",
  initialState,
  reducers: {
    increment: (state) => {
      //state.value += 1;
    },
    decrement: (state) => {
      //state.value -= 1;
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      //state.value += action.payload;
    },
  },
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        //state.quiz = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        //state.status = "idle";
        //state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        //state.status = "failed";
      });
  },
});

export const { increment, decrement, incrementByAmount } = quizSlice.actions;

//export const selectCount = (state: RootState) => state.counter.value;

// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default quizSlice.reducer;
